Spring initializer : start.spring.io

Spring framework in java is used to develop enterprise ready application.
but in spring framework we have to include lots of configuration,modules, packages etc...

Spring boot is an extension of spring framework
it was developed so the developer could concentrate more on business logic rather than configuration
key features of spring boot:
	rapid application development
	managing dependencies
	auto configuration for all the dependencies and libraries
	has Embedded server


Dependency Injection
	Inversion of Controller : giving controller from developer to framework(creating instances)
	ex: instead of creating object of a class manually we can ask framework to create it for us
	to implement this thing dependency injection is used.

Annotations meaning
@SpringBootConfiguration: tells that this is the main spring boot configuration file and adds enableautoconfiguration
@ComponentScan: scanns all the components present and these components to container while 
	while application is started.
@Component : to make a class as component and add it to the spring container when application is started

@RestController: defines that class is a component + controller and it restful(means it returns  something here it is response body)

to change the configuration like port number we should do it in application.properties
to change the port server.port 8082

@RequestMapping(value="/",method=RequestMethod.GET) = @GetMapping("/")

to run spring boot application in CLI 
mvn spring-boot:run


When we makes changes in our app we shoud stop and restart our server to avoid this we can add spring-boot-devtools dependency

Example : creating department entity

In restAPI 
first layer: add all the APIs to work with department entity(controller layer)
service layer: contains the business logic as rest-api layer only to get the particular request and get the response back it is just for routing purpose
Data Acces layer: it is responsible to interact with database

@Entity : to make a particular class as an entity so that it can interact with database using jpa
@Id : to make a particular property as primary key
@GeneratedValue(strategy = GenerationType.AUTO) to automatically create primary key

for services and repositories we will create interface and then we will implement it

no need to provide implementation to respository as we have extended JpaRepository<Department, primary_key_type> as it contains all the required methods

@RequestBody is used to convert the json object into our entity

public Department saveDepartment(Department department) {
		
		DepartmentService s = new DepartmentServiceImpl();
		return s.saveDepartment();
	}

@Autowired
	private DepartmentService departmentService;
	@PostMapping("/departments")
	public Department saveDepartment(@RequestBody Department department) {
		
		return departmentService.saveDepartment(department);
	}

to get the objects directly from spring container above code

dynamic  routing "/departments/{id}"
to match the passed argument with path variable
@PathVariable("id") Long DepartmentID
@DeleteMapping for deleting
@PutMapping for updating(get+post)

Department db = departmentRepository.findById(departmentId).get();
return object instance


https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods
to get all the queries...


to query using sql 
in repository
@Query("select u from User u where u.firstName like %?1",nativeQuery=true)
?1 means first parameter


different validation available
@NotBlank(message="Please add name")
@Future
@Past
@FuturePresent


loggers
private final Logger LOGGER = LoggerFactory.getLogger(DepartmentController.class);
LOGGER.info("Department Class")

Lombok java annotation library allows us to remove Boiler Plate code in our java applications


to avoid writing getter setter default constructor etc
we can use lombok to avoid these codes
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Getter
@Setter



server.port = 8082
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:dcbapp
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
for h2 database

spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/dcbapp
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.jpa.show-sql:true
for mysql database and add mysql-driver dependencies


application.yml file can also be used to write configuration
it is readable file and avoids Duplicates
we can convert our properties to yml using any online tool availabe



Spring profiles to have different configuration for different profiles/environments

server:
  port: '8082'

spring:
	profiles:
		active: qa
  
---

spring:
  profiles : dev
  datasource :
    username: root
    url: jdbc:mysql://localhost:3306/dcbapp
    driverClassName: com.mysql.jdbc.Driver
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: 'true'
welcome:
  message: Welcome to daily coding
  
---

spring:
  profiles : qa
  datasource :
    username: root
    url: jdbc:mysql://localhost:3306/dcbapp-qa
    driverClassName: com.mysql.jdbc.Driver
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: 'true'
welcome:
  message: Welcome to daily coding
  
---
spring:
  profiles : prod
  datasource :
    username: root
    url: jdbc:mysql://localhost:3306/dcbapp-prod
    driverClassName: com.mysql.jdbc.Driver
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: 'true'
welcome:
  message: Welcome to daily coding


Deploying our java application

to create jar files(we will jar files to deploy our app)
mvn clean install
cd target
java -jar Spring-boot-tutorial-1.0.0.jar --spring.profiles.active=prod


Spring Actuator
whenever we deploy our app in any of the environments we need to monitor our app
how that application is performing,memory used,beans created etc
spring actutator provides this functionality

go to pom.xml add actuator dependency
go to the path http://localhost:8082/actuator


to expose all the endpoints in application.yml

management:
	endpoints:
		web:
			exposure:
				include: "*"

